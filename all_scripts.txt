### _record_0.0 Data Prep ### 
# Data Prep for the MoDOT Passenger Rail Corridor Studies  library(tidyverse) library(tigris) library(sf) library(tmap) tmap_mode("view")  basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))   # State/County Boundary Data --------------------------------------------------------------  state <- "MO" stateFIPS <- str_extract(lookup_code(state), '(?<=\').*?(?=\')') fips <- tigris::fips_codes %>% mutate(GEOID = paste0(state_code, county_code))  stateShp <- states(cb = TRUE) %>% filter(STUSPS == state) %>% st_transform(4326)  crsuggest::suggest_crs(stateShp) crs <- 6511  # NAD83 (2011) / Missouri Central; Meters  stateShp <- stateShp %>% st_transform(crs)  stateShp %>% write_sf("data/For_GIS_Teams/Missouri.shp")  counties_MO <- counties(state = "MO", cb = TRUE) tm_shape(counties_MO) + tm_polygons()  counties_MO %>% write_sf("data/For_GIS_Teams/counties_MO.shp")  # Rail Line Data ----------------------------------------------------------  # From: https://hub.arcgis.com/datasets/fedmaps::north-american-rail-lines-1/about     # rail_lines <-      #   read_sf("https://services2.arcgis.com/FiaPA4ga0iQKduv3/arcgis/rest/services/North_American_Rail_Lines_v1/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")     #      # save(rail_lines, file = "rail_lines.RData") load("rail_lines.RData")  rail_MO <-    rail_lines %>% st_transform(crs) %>%    st_filter(stateShp) %>% st_intersection(stateShp) %>%    filter(!NET %in% c("A", "O", "R", "T", "X"))  basemaps +   tm_shape(rail_MO) + tm_lines(col = "NET", lwd = 3, palette = "Set1")  rail_MObuff <-    rail_lines %>% st_transform(crs) %>% filter(!NET %in% c("A", "O", "R", "T", "X")) %>%     st_filter(stateShp %>% st_buffer(1000*100)) %>%    summarize()  tm_shape(rail_MObuff) + tm_lines(col = "red") +   tm_shape(rail_MO)  + tm_lines()    rail_amtrak <- rail_MO %>% filter(PASSNGR == "A")  tm_shape(rail_amtrak) + tm_lines(lwd = 5)  # Define the Amtrak lines according the RR subdivision lineLookup <-    unique(rail_amtrak$SUBDIV) %>% as_tibble() %>%    mutate(AmtrakLine = c(     "Missouri River Runner",     "Texas Eagle",     "Southwest Chief",     "Missouri River Runner",     "Southwest Chief",     "Texas Eagle",     "Texas Eagle",     "Southwest Chief",     "Southwest Chief",     "Southwest Chief",     "Texas Eagle",     "Southwest Chief"   )) %>%    rename(SUBDIV = value)  rail_amtrak <- rail_amtrak %>% left_join(lineLookup)  basemaps +   tm_shape(rail_amtrak) +      tm_lines(col = "AmtrakLine", lwd = 3, palette = "Set1", popup.vars = TRUE) +      tm_text("SUBDIV")  rail_amtrak %>% write_sf("data/For_GIS_Teams/rail_amtrak.shp") rail_MO %>% write_sf("data/For_GIS_Teams/rail_MO.shp") rail_MObuff %>% write_sf("data/For_GIS_Teams/rail_MO_buff.shp")    # Rail Crossing and Incident Data -----------------------------------------  # Data from MoDOT modot_trra_grades_aadt <-    read_csv("data/from_MoDOT/MoDOT TRRA Approach Grades_AADT.csv") modot_up_grades_aadt <-    read_csv("data/from_MoDOT/UP Passenger Subs_aadt_approach grade.csv") modog_extra <-    readxl::read_excel("data/From_MoDOT/AADT_approachGrade_ crossings request from HDR.xlsx") modot_all_xings <-    bind_rows(modot_trra_grades_aadt, modot_up_grades_aadt) %>%    mutate(CrossingID = DOTNumber, MoDOT = 1) %>%    janitor::clean_names()   # Read in 10 years of Accident/Incident data gcisAccHist <- map_dfr(   dir("data/acc", full.names = TRUE),   ~read_csv(., col_types = cols(.default = "c")) #default to character type to avoid conflicting auto-generated types ) %>%    mutate(FatalInjury = case_when(     as.numeric(TOTKLD) > 0 ~ "Fatal",     as.numeric(TOTINJ) > 0 ~ "Injury",     TRUE ~ "PDO"   )) gcisAccHist %>% count(FatalInjury)  incidents_year_sev <- gcisAccHist %>%    group_by(CrossingID = GXID, FatalInjury, IYR) %>%    summarize(count = n()) %>%    pivot_wider(names_from = FatalInjury, values_from = count) %>%    mutate(     across(PDO:Fatal, ~replace_na(.,0)),      Total = Fatal + Injury + PDO   ) %>%    arrange(CrossingID, IYR)  inc_10yr <- incidents_year_sev %>%    group_by(CrossingID) %>%    summarize(     inc_tot_10yr = sum(Total),     inc_fat_10yr = sum(Fatal),     inc_inj_10yr = sum(Injury)   )  inc_5yr <- incidents_year_sev %>%    filter(IYR %in% c("22", "21", "20", "19", "18")) %>%    group_by(CrossingID) %>%    summarize(     inc_tot_5yr = sum(Total),     inc_fat_5yr = sum(Fatal),     inc_inj_5yr = sum(Injury)   )   # Read in all Current US crossing data # Download "All States" file from: https://safetydata.fra.dot.gov/OfficeofSafety/publicsite/DownloadCrossingInventoryData.aspx  gcisCurrent <-   read_csv("data/inv/PublishedCrossingData-02-28-2023.csv",            col_types = cols(              MilePost = col_double())) %>%    filter(ReasonID != 16) %>%    left_join(inc_10yr) %>%    left_join(inc_5yr) %>%    left_join(modot_all_xings %>% select(     CrossingID = crossing_id, latitude_modot = latitude, longitude_modot = longitude,     app1_grade = appr_grade_1,     app1_grade_perc = appr_grade_percent_2,     app1_dir = appr_dir_3,     app2_grade = appr_grade_4,     app2_grade_perc = appr_grade_percent_5,     app2_dir = appr_dir_6,     hwy_road_street,     aadt_modot = aadt,     aadt_year_modot = aadt_year     )) %>%    mutate(     Latitude = if_else(is.na(Latitude), latitude_modot, Latitude),     Longitude = if_else(is.na(Longitude), longitude_modot, Longitude),     WarnDev = case_when(       as.numeric(GateConf) == 3 ~ "FourQuad",       as.numeric(Gates) > 0 & Channel %in% 1:4 ~ "GatesWithMedian",       as.numeric(Gates) > 0 ~ "Gates",       as.numeric(FlashPai) > 0 & as.numeric(Gates) == 0 ~ "FlashingOnly",       as.numeric(Gates) == 0 &  as.numeric(FlashPai) == 0 &  as.numeric(StopStd) > 0 ~ "StopSign",       as.numeric(Gates) == 0 &  as.numeric(FlashPai) == 0 &  as.numeric(YieldStd) > 0 ~ "YieldSign",       as.numeric(Gates) == 0 &  as.numeric(FlashPai) == 0 &  as.numeric(StopStd) == 0 &  as.numeric(XBuck) > 0 ~ "Crossbucks",       TRUE ~ "Not Classified"     )   )  # Fixing individual crossings gcisCurrent$PassCnt <- if_else(gcisCurrent$CrossingID == "446298Y", 2, gcisCurrent$PassCnt)  # Grade Separations on Amtrak routes in MO gradeseps_MO_amtrak <- gcisCurrent %>%    filter(     PosXing %in% c(2, 3),     !is.na(Latitude)     ) %>%    mutate(Position = if_else(PosXing == 2, "RR Under", "RR Over" )) %>%    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%    st_transform(crs) %>%    st_filter(rail_amtrak %>% st_buffer(100)) %>%    st_join(rail_amtrak %>% select(AmtrakLine), join = st_nearest_feature) %>%    filter(AmtrakLine != "Southwest Chief") basemaps +   tm_shape(gradeseps_MO_amtrak) + tm_dots(col = "Position", palette = "Set1")  # Public Grade crossings on Amtrak routes in MO xings_pub_MO_amtrak <- gcisCurrent %>%    filter(PosXing == 1, !is.na(Latitude), TypeXing == 3) %>%    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%    st_transform(crs) %>%    st_filter(rail_amtrak %>% st_buffer(50)) %>%    mutate(Pedestrian = if_else(XPurpose == 1, "No", "Yes")) %>%    st_join(rail_amtrak %>% select(AmtrakLine), join = st_nearest_feature) %>%    filter(     AmtrakLine != "Southwest Chief",      !CrossingID %in% c(       "442106R",#Exclude crossings based on review below       "442108E",       "442633K",       "442679Y",       "442732H",       "425030T",       "803289K",       "803288D",       "803302W",       "803293A",       "445924K",       "446016F",        "446017M",       "438528C",       "803355V",       "803347D",       "293616G",       "663508H",       "663510J",       "441898J",       "973885C",       "973886J",       "973890Y",       "973889E",       "442529R",       "664331W",       "664332D",       "664326A",       "442709N",       "664302L",       "595845L",       "480278B",       "674019D"       )     )   xings_pub_MO_amtrak %>% count(AmtrakLine)    basemaps +   tm_shape(xings_pub_MO_amtrak) + tm_dots(col = "XPurpose", palette = "Set1")    # Private Grade crossings on Amtrak routes in MO xings_priv_MO_amtrak <- gcisCurrent %>%    filter(PosXing == 1, !is.na(Latitude), TypeXing == 2) %>%    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%    st_transform(crs) %>%    st_filter(rail_amtrak %>% st_buffer(50)) %>%    mutate(Pedestrian = if_else(XPurpose == 1, "No", "Yes")) %>%    st_intersection(rail_amtrak %>% select(AmtrakLine) %>% st_buffer(20)) %>%    filter(AmtrakLine != "Southwest Chief") basemaps +   tm_shape(xings_priv_MO_amtrak) + tm_dots(col = "XPurpose", palette = "Set1")     xings_pub_MO_amtrak %>% count(AmtrakLine)    gcisCurrent_MoDOT <-    gcisCurrent %>% filter(CrossingID %in% modot_all_xings$crossing_id) %>%    filter(PassCnt > 0) %>%    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%    filter(     !RrSubDiv %in% c(       "PIXLEY IND LD INDEPENDENCE",       "Bagnell Ind Ld",       "Lake Ind Ld",       "WEST BELT",       "Lesperance Ind Ld",       "STE. GENEVIEVE IND LD",       "Ste. Genevieve Ind Ld",       "Bonne Terre Ind Ld",       "Crystal City Ind Ld"     ),     !CrossingID %in% c(       "442106R",       "442108E",       "442633K",       "442679Y",       "442732H",       "425030T",       "803289K",       "803288D",       "803302W",       "803293A",       "445924K",       "446016F",        "446017M",       "438528C",       "803355V"     )   )   basemaps +   tm_shape(rail_amtrak) +    tm_lines(col = "AmtrakLine", lwd = 3, palette = "Set1", popup.vars = TRUE) +   tm_shape(gcisCurrent_MoDOT) + tm_dots(col = "RrSubDiv", size = 0.2) +   tm_shape(xings_pub_MO_amtrak) + tm_dots(popup.vars = TRUE)      # Questions:  # TRR: Missing grade/AADT info for all crossings between Hoffmeister Ave and the connection to the Missouri RR  # 442145G: Hwy crossing in FRA, but not MoDOT # 445889Y: Confirm this is private crossing (listed as public in FRA) # 445887K: Confirm private crossing # 445889Y: Confirm this is private crossing (listed as public in FRA; streetview from 2015 doesn't show private xing xbucks) # 445949F: Missing grade/AADT info for this crossing # 446012D: Confirm this is private crossing (listed as public in FRA) # 446320J: Confirm this is private crossing (listed as public in FRA); Note that even if this is classified as private, I would recommend including it in our study since it is a busy public works facility, not a simple residential crossing # 803352A: Missing grade/AADT info for this crossing # 803349S: Confirm private; Appears gated for limited access; Is gate ever operated by users from the east side (while vehicle is on the crossing?)  # 924199V: Pedestrian crossing in Kingsville; Should we include it? # 442120L: Pedestrian crossing in Sedalia; Same Question # 442129X: Ped crossing in Sedalia # 972368K: Ped crossing at Amtrak station in Washington # 425015R: Ped crossing at Amtrak station in Kirkwood # 446317B: Ped crossing at Amtrak station in Poplar Bluff   # 6 ped crossings not in MoDOT # 9 crossings missing data or need to confirm private # 16 missing data near the merge point  # 31 total difference   # 278 Our count xings_pub_MO_amtrak %>% count() # 247 Their data? gcisCurrent_MoDOT %>% count() 278-247   # Crossing Data Output -------------------------------------------------------------  xings_pub_MO_amtrak %>% write_sf("data/For_GIS_Teams/xings_pub_MO_amtrak.shp") xings_priv_MO_amtrak %>% write_sf("data/For_GIS_Teams/xings_priv_MO_amtrak.shp") gradeseps_MO_amtrak %>% write_sf("data/For_GIS_Teams/gradeseps_MO_amtrak.shp")   save(   basemaps,   counties_MO,   gcisAccHist,   gcisCurrent_MoDOT,   gradeseps_MO_amtrak,   incidents_year_sev,   modot_all_xings,   rail_amtrak,   rail_MO,   rail_MObuff,   xings_priv_MO_amtrak,   xings_pub_MO_amtrak,   file = "data/MoDOT_base_data.RData" )     # Crossing review worksheet prep ------------------------------------------  # Missouri River Runner # Order west to east; Select specific attributes data_MRR <-    xings_pub_MO_amtrak %>% filter(AmtrakLine == "Missouri River Runner") %>%    mutate(x_pos = st_coordinates(.)[,1]) %>% arrange(x_pos) %>% mutate(order = row_number()) %>%    mutate(order = case_when(     order == 13 ~ as.integer(12), #manual fix: track travels west briefly     order == 14 ~ as.integer(13),     order == 12 ~ as.integer(14),     TRUE ~ order   )) %>%    select(     AmtrakLine,     order,     CrossingID,     WarnDev,     Street,     hwy_road_street,     DayThru,     NghtThru,     TotalSwt,     MaxTtSpd,     Gates,     FlashPai,     Aadt,     AadtYear,     aadt_modot,     aadt_year_modot   ) %>%    st_transform(4326) %>%    mutate(     x = st_coordinates(.)[,1],      y = st_coordinates(.)[,2]    )  data_TexEag <-    xings_pub_MO_amtrak %>% filter(AmtrakLine == "Texas Eagle") %>%    mutate(x_pos = st_coordinates(.)[,2]) %>% arrange(x_pos) %>% mutate(order = row_number()) %>%    # mutate(order = case_when(   #   order == 13 ~ as.integer(12), #manual fix: track travels west briefly   #   order == 14 ~ as.integer(13),   #   order == 12 ~ as.integer(14),   #   TRUE ~ order   # )) %>%    select(     AmtrakLine,     order,     CrossingID,     WarnDev,     Street,     hwy_road_street,     DayThru,     NghtThru,     TotalSwt,     MaxTtSpd,     Gates,     FlashPai,     Aadt,     AadtYear,     aadt_modot,     aadt_year_modot   ) %>%    st_transform(4326) %>%    mutate(     x = st_coordinates(.)[,1],      y = st_coordinates(.)[,2]    )   data_forTeams <-    bind_rows(     data_MRR %>% st_drop_geometry(),      data_TexEag %>% st_drop_geometry()     )  bind_rows(data_MRR, data_TexEag) %>%    mutate(name = paste0(AmtrakLine, "_", order, "_", CrossingID)) %>%    write_sf("data/FinalCrossings.kml")    data_forTeams %>% writexl::write_xlsx("data/BaseDataForTeams.xlsx")  glimpse(data_MRR) glimpse(xings_pub_MO_amtrak) data_forTeams %>% count(AmtrakLine, WarnDev)  tm_shape(data_forTeams) + tm_dots(col = "order") + tm_text("order")  data_ 
### 0.0 Data Prep ### 
# Data Prep for the MoDOT Passenger Rail Corridor Studies  library(tidyverse) library(tigris) library(sf) library(tmap) tmap_mode("view")  basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))   # State/County Boundary Data --------------------------------------------------------------  state <- "MO" stateFIPS <- str_extract(lookup_code(state), '(?<=\').*?(?=\')') fips <- tigris::fips_codes %>% mutate(GEOID = paste0(state_code, county_code))  stateShp <- states(cb = TRUE) %>% filter(STUSPS == state) %>% st_transform(4326)  crsuggest::suggest_crs(stateShp) crs <- 6511  # NAD83 (2011) / Missouri Central; Meters  stateShp <- stateShp %>% st_transform(crs)  stateShp %>% write_sf("data/For_GIS_Teams/Missouri.shp")  counties_MO <- counties(state = "MO", cb = TRUE) tm_shape(counties_MO) + tm_polygons()  counties_MO %>% write_sf("data/For_GIS_Teams/counties_MO.shp")  # Rail Line Data ----------------------------------------------------------  # From: https://hub.arcgis.com/datasets/fedmaps::north-american-rail-lines-1/about     # rail_lines <-      #   read_sf("https://services2.arcgis.com/FiaPA4ga0iQKduv3/arcgis/rest/services/North_American_Rail_Lines_v1/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson")     #      # save(rail_lines, file = "rail_lines.RData") load("rail_lines.RData")  rail_MO <-    rail_lines %>% st_transform(crs) %>%    st_filter(stateShp) %>% st_intersection(stateShp) %>%    filter(!NET %in% c("A", "O", "R", "T", "X"))  basemaps +   tm_shape(rail_MO) + tm_lines(col = "NET", lwd = 3, palette = "Set1")  rail_MObuff <-    rail_lines %>% st_transform(crs) %>% filter(!NET %in% c("A", "O", "R", "T", "X")) %>%     st_filter(stateShp %>% st_buffer(1000*100)) %>%    summarize()  tm_shape(rail_MObuff) + tm_lines(col = "red") +   tm_shape(rail_MO)  + tm_lines()    rail_amtrak <- rail_MO %>% filter(PASSNGR == "A")  tm_shape(rail_amtrak) + tm_lines(lwd = 5)  # Define the Amtrak lines according the RR subdivision lineLookup <-    unique(rail_amtrak$SUBDIV) %>% as_tibble() %>%    mutate(AmtrakLine = c(     "Missouri River Runner",     "Texas Eagle",     "Southwest Chief",     "Missouri River Runner",     "Southwest Chief",     "Texas Eagle",     "Texas Eagle",     "Southwest Chief",     "Southwest Chief",     "Southwest Chief",     "Texas Eagle",     "Southwest Chief"   )) %>%    rename(SUBDIV = value)  rail_amtrak <- rail_amtrak %>% left_join(lineLookup)  basemaps +   tm_shape(rail_amtrak) +      tm_lines(col = "AmtrakLine", lwd = 3, palette = "Set1", popup.vars = TRUE) +      tm_text("SUBDIV")  rail_amtrak %>% write_sf("data/For_GIS_Teams/rail_amtrak.shp") rail_MO %>% write_sf("data/For_GIS_Teams/rail_MO.shp") rail_MObuff %>% write_sf("data/For_GIS_Teams/rail_MO_buff.shp")       # Rail Crossing and Incident Data -----------------------------------------  # Data from MoDOT modot_trra_grades_aadt <-    read_csv("data/from_MoDOT/MoDOT TRRA Approach Grades_AADT.csv") modot_up_grades_aadt <-    read_csv("data/from_MoDOT/UP Passenger Subs_aadt_approach grade.csv") modot_extra <-    readxl::read_excel("data/From_MoDOT/AADT_approachGrade_ crossings request from HDR.xlsx") modot_all_xings <-    bind_rows(modot_trra_grades_aadt, modot_up_grades_aadt, modot_extra) %>%    filter(crossing_id != "803078N") %>%    select(crossing_id, RR, Subdivision, app1_grade, app1_grade_perc, app1_dir,          app2_grade, app2_grade_perc, app2_dir, AADT, AADTYear, Latitude, Longitude, hwy_road_street = `Hwy/Road/Street`) %>%    mutate(     grade_change = app1_grade_perc + app2_grade_perc   )   # Read in 10 years of Accident/Incident data gcisAccHist <- map_dfr(   dir("data/acc", full.names = TRUE),   ~read_csv(., col_types = cols(.default = "c")) #default to character type to avoid conflicting auto-generated types ) %>%    mutate(FatalInjury = case_when(     as.numeric(TOTKLD) > 0 ~ "Fatal",     as.numeric(TOTINJ) > 0 ~ "Injury",     TRUE ~ "PDO"   )) gcisAccHist %>% count(FatalInjury)  incidents_year_sev <- gcisAccHist %>%    group_by(CrossingID = GXID, FatalInjury, IYR) %>%    summarize(count = n()) %>%    pivot_wider(names_from = FatalInjury, values_from = count) %>%    mutate(     across(PDO:Fatal, ~replace_na(.,0)),      Total = Fatal + Injury + PDO   ) %>%    arrange(CrossingID, IYR)  inc_10yr <- incidents_year_sev %>%    group_by(CrossingID) %>%    summarize(     inc_tot_10yr = sum(Total),     inc_fat_10yr = sum(Fatal),     inc_inj_10yr = sum(Injury)   )  inc_5yr <- incidents_year_sev %>%    filter(IYR %in% c("22", "21", "20", "19", "18")) %>%    group_by(CrossingID) %>%    summarize(     inc_tot_5yr = sum(Total),     inc_fat_5yr = sum(Fatal),     inc_inj_5yr = sum(Injury)   )   # Read in all Current US crossing data # Download "All States" file from: https://safetydata.fra.dot.gov/OfficeofSafety/publicsite/DownloadCrossingInventoryData.aspx  gcisCurrent <-   read_csv("data/inv/PublishedCrossingData-02-28-2023.csv",            col_types = cols(              MilePost = col_double())) %>%    filter(ReasonID != 16) %>%    left_join(inc_10yr) %>%    left_join(inc_5yr) %>%    left_join(modot_all_xings %>% select(     CrossingID = crossing_id, latitude_modot = Latitude, longitude_modot = Longitude,     app1_grade,     app1_grade_perc,     app1_dir,     app2_grade,     app2_grade_perc,     app2_dir,     hwy_road_street,     aadt_modot = AADT,     aadt_year_modot = AADTYear     )) %>%    mutate(     Latitude = if_else(is.na(Latitude), latitude_modot, Latitude),     Longitude = if_else(is.na(Longitude), longitude_modot, Longitude),     WarnDev = case_when(       as.numeric(GateConf) == 3 ~ "FourQuad",       as.numeric(Gates) > 0 & Channel %in% 1:4 ~ "GatesWithMedian",       as.numeric(Gates) > 0 ~ "Gates",       as.numeric(FlashPai) > 0 & as.numeric(Gates) == 0 ~ "FlashingOnly",       as.numeric(Gates) == 0 &  as.numeric(FlashPai) == 0 &  as.numeric(StopStd) > 0 ~ "StopSign",       as.numeric(Gates) == 0 &  as.numeric(FlashPai) == 0 &  as.numeric(YieldStd) > 0 ~ "YieldSign",       as.numeric(Gates) == 0 &  as.numeric(FlashPai) == 0 &  as.numeric(StopStd) == 0 &  as.numeric(XBuck) > 0 ~ "Crossbucks",       TRUE ~ "Not Classified"     )   )  # Fixing individual crossings gcisCurrent$PassCnt <- if_else(gcisCurrent$CrossingID == "446298Y", 2, gcisCurrent$PassCnt)  # Grade Separations on Amtrak routes in MO gradeseps_MO_amtrak <- gcisCurrent %>%    filter(     PosXing %in% c(2, 3),     !is.na(Latitude)     ) %>%    mutate(Position = if_else(PosXing == 2, "RR Under", "RR Over" )) %>%    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%    st_transform(crs) %>%    st_filter(rail_amtrak %>% st_buffer(100)) %>%    st_join(rail_amtrak %>% select(AmtrakLine), join = st_nearest_feature) %>%    filter(AmtrakLine != "Southwest Chief") basemaps +   tm_shape(gradeseps_MO_amtrak) + tm_dots(col = "Position", palette = "Set1")  # Public Grade crossings on Amtrak routes in MO xings_pub_MO_amtrak <- gcisCurrent %>%    filter(     PosXing == 1,      !is.na(Latitude),      TypeXing == 3) %>%    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%    st_transform(crs) %>%    st_filter(rail_amtrak %>% st_buffer(50)) %>%    mutate(Pedestrian = if_else(XPurpose == 1, "No", "Yes")) %>%    st_join(rail_amtrak %>% select(AmtrakLine), join = st_nearest_feature) %>%    filter(     AmtrakLine != "Southwest Chief",      !CrossingID %in% c(       "442106R",#Exclude crossings based on review below       "442108E",       "442633K",       "442679Y",       "442732H",       "425030T",       "803289K",       "803288D",       "803302W",       "803293A",       "445924K",       "446016F",        "446017M",       "438528C",       "803355V",       "803347D",       "293616G",       "663508H",       "663510J",       "441898J",       "973885C",       "973886J",       "973890Y",       "973889E",       "442529R",       "664331W",       "664332D",       "664326A",       "442709N",       "664302L",       "595845L",       "480278B",       "674019D"       )     )   xings_pub_MO_amtrak %>% count(AmtrakLine)    basemaps +   tm_shape(xings_pub_MO_amtrak) + tm_dots(col = "XPurpose", palette = "Set1")    # Private Grade crossings on Amtrak routes in MO xings_priv_MO_amtrak <- gcisCurrent %>%    filter(     #PosXing == 1,      !is.na(Latitude),      TypeXing == 2) %>%    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%    st_transform(crs) %>%    st_filter(rail_amtrak %>% st_buffer(50)) %>%    mutate(Pedestrian = if_else(XPurpose == 1, "No", "Yes")) %>%    st_intersection(rail_amtrak %>% select(AmtrakLine) %>% st_buffer(20)) %>%    filter(AmtrakLine != "Southwest Chief") basemaps +   tm_shape(xings_priv_MO_amtrak) + tm_dots(col = "XPurpose", palette = "Set1")  xings_priv_MO_amtrak %>% count(PosXing)    xings_pub_MO_amtrak %>% count(AmtrakLine)   gcisCurrent_MoDOT <-    gcisCurrent %>% filter(CrossingID %in% modot_all_xings$crossing_id) %>%    filter(PassCnt > 0) %>%    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%    filter(     !RrSubDiv %in% c(       "PIXLEY IND LD INDEPENDENCE",       "Bagnell Ind Ld",       "Lake Ind Ld",       "WEST BELT",       "Lesperance Ind Ld",       "STE. GENEVIEVE IND LD",       "Ste. Genevieve Ind Ld",       "Bonne Terre Ind Ld",       "Crystal City Ind Ld"     ),     !CrossingID %in% c(       "442106R",       "442108E",       "442633K",       "442679Y",       "442732H",       "425030T",       "803289K",       "803288D",       "803302W",       "803293A",       "445924K",       "446016F",        "446017M",       "438528C",       "803355V"     )   )   basemaps +   tm_shape(rail_amtrak) +    tm_lines(col = "AmtrakLine", lwd = 3, palette = "Set1", popup.vars = TRUE) +   tm_shape(gcisCurrent_MoDOT) + tm_dots(col = "RrSubDiv", size = 0.2) +   tm_shape(xings_pub_MO_amtrak) + tm_dots(popup.vars = TRUE)      # Questions:  # TRR: Missing grade/AADT info for all crossings between Hoffmeister Ave and the connection to the Missouri RR  # 442145G: Hwy crossing in FRA, but not MoDOT # 445889Y: Confirm this is private crossing (listed as public in FRA) # 445887K: Confirm private crossing # 445889Y: Confirm this is private crossing (listed as public in FRA; streetview from 2015 doesn't show private xing xbucks) # 445949F: Missing grade/AADT info for this crossing # 446012D: Confirm this is private crossing (listed as public in FRA) # 446320J: Confirm this is private crossing (listed as public in FRA); Note that even if this is classified as private, I would recommend including it in our study since it is a busy public works facility, not a simple residential crossing # 803352A: Missing grade/AADT info for this crossing # 803349S: Confirm private; Appears gated for limited access; Is gate ever operated by users from the east side (while vehicle is on the crossing?)  # 924199V: Pedestrian crossing in Kingsville; Should we include it? # 442120L: Pedestrian crossing in Sedalia; Same Question # 442129X: Ped crossing in Sedalia # 972368K: Ped crossing at Amtrak station in Washington # 425015R: Ped crossing at Amtrak station in Kirkwood # 446317B: Ped crossing at Amtrak station in Poplar Bluff   # 6 ped crossings not in MoDOT # 9 crossings missing data or need to confirm private # 16 missing data near the merge point  # 31 total difference   # 278 Our count xings_pub_MO_amtrak %>% count() # 247 Their data? gcisCurrent_MoDOT %>% count() 278-247      # Corridor Breakdowns -----------------------------------------------------  MRR_pub <- xings_pub_MO_amtrak %>% filter(AmtrakLine == "Missouri River Runner") %>%    mutate(WarnDev2 = case_when(     WarnDev == "Gates" ~ "Gates",     WarnDev == "GatesWithMedian" ~ "Gates",     WarnDev == "FlashingOnly" ~ "Flashing Lights Only",     TRUE ~ "Passive"   )) MRR_priv <- xings_priv_MO_amtrak %>% filter(AmtrakLine == "Missouri River Runner") MRR_sep <- gradeseps_MO_amtrak %>% filter(AmtrakLine == "Missouri River Runner")  TE_pub <- xings_pub_MO_amtrak %>% filter(AmtrakLine == "Texas Eagle") %>%    mutate(WarnDev2 = case_when(     WarnDev == "Gates" ~ "Gates",     WarnDev == "GatesWithMedian" ~ "Gates",     WarnDev == "FlashingOnly" ~ "Flashing Lights Only",     TRUE ~ "Passive"   ))shsev = case_when()   ) TE_priv <- xings_priv_MO_amtrak %>% filter(AmtrakLine == "Texas Eagle") TE_sep <- gradeseps_MO_amtrak %>% filter(AmtrakLine == "Texas Eagle")  MRR_priv %>% count(PosXing) MRR_pub %>% count(PosXing)  TE_pub %>% count(WarnDev2)  basemaps +   tm_shape(countiesShp) + tm_polygons(col = "gray", border.col = "white", lwd = 2) +   tm_shape(rail_amtrak %>% filter(AmtrakLine == "Missouri River Runner")) + tm_lines() +   #tm_shape(MRR_pub %>% filter(WarnDev2 == "Gates")) + tm_dots(col = ) +   #tm_shape(MRR_pub %>% filter(WarnDev2 == "Passive")) + tm_dots(col = "red", size = 0.1, border.col = "black") +   tm_shape(MRR_pub %>% filter(inc_fat_5yr > 0)) + tm_dots(col = "red", size = 0.2) +   tm_shape(MRR_pub %>% filter(inc_inj_5yr > 0)) + tm_dots(col = "orange", size = 0.1) +   tm_shape(MRR_pub %>% filter(inc_tot_5yr - inc_fat_5yr - inc_inj_5yr > 0)) + tm_dots()      basemaps +   tm_shape(countiesShp) + tm_polygons(col = "gray", border.col = "white", lwd = 2) +   tm_shape(rail_amtrak %>% filter(AmtrakLine == "Texas Eagle")) + tm_lines() +   tm_shape(TE_pub %>% filter(WarnDev2 == "Gates")) + tm_dots(col = ) +   tm_shape(TE_pub %>% filter(WarnDev2 == "Passive")) + tm_dots(col = "red", size = 0.1, border.col = "black")   # Crossing Data Output -------------------------------------------------------------  xings_pub_MO_amtrak %>% write_sf("data/For_GIS_Teams/xings_pub_MO_amtrak.shp") xings_priv_MO_amtrak %>% write_sf("data/For_GIS_Teams/xings_priv_MO_amtrak.shp") gradeseps_MO_amtrak %>% write_sf("data/For_GIS_Teams/gradeseps_MO_amtrak.shp")   save(   basemaps,   counties_MO,   gcisAccHist,   gcisCurrent_MoDOT,   gradeseps_MO_amtrak,   incidents_year_sev,   modot_all_xings,   rail_amtrak,   rail_MO,   rail_MObuff,   xings_priv_MO_amtrak,   xings_pub_MO_amtrak,   file = "data/MoDOT_base_data.RData" )     # Crossing review worksheet prep ------------------------------------------  # Missouri River Runner # Order west to east; Select specific attributes data_MRR <-    xings_pub_MO_amtrak %>% filter(AmtrakLine == "Missouri River Runner") %>%    mutate(x_pos = st_coordinates(.)[,1]) %>% arrange(x_pos) %>% mutate(order = row_number()) %>%    mutate(order = case_when(     order == 13 ~ as.integer(12), #manual fix: track travels west briefly     order == 14 ~ as.integer(13),     order == 12 ~ as.integer(14),     TRUE ~ order   )) %>%    select(     AmtrakLine,     order,     CrossingID,     WarnDev,     Street,     hwy_road_street,     DayThru,     NghtThru,     TotalSwt,     MaxTtSpd,     Gates,     FlashPai,     Aadt,     AadtYear,     aadt_modot,     aadt_year_modot   ) %>%    st_transform(4326) %>%    mutate(     x = st_coordinates(.)[,1],      y = st_coordinates(.)[,2]    )  data_TexEag <-    xings_pub_MO_amtrak %>% filter(AmtrakLine == "Texas Eagle") %>%    mutate(x_pos = st_coordinates(.)[,2]) %>% arrange(x_pos) %>% mutate(order = row_number()) %>%    # mutate(order = case_when(   #   order == 13 ~ as.integer(12), #manual fix: track travels west briefly   #   order == 14 ~ as.integer(13),   #   order == 12 ~ as.integer(14),   #   TRUE ~ order   # )) %>%    select(     AmtrakLine,     order,     CrossingID,     WarnDev,     Street,     hwy_road_street,     DayThru,     NghtThru,     TotalSwt,     MaxTtSpd,     Gates,     FlashPai,     Aadt,     AadtYear,     aadt_modot,     aadt_year_modot   ) %>%    st_transform(4326) %>%    mutate(     x = st_coordinates(.)[,1],      y = st_coordinates(.)[,2]    )   data_forTeams <-    bind_rows(     data_MRR %>% st_drop_geometry(),      data_TexEag %>% st_drop_geometry()     )  bind_rows(data_MRR, data_TexEag) %>%    mutate(name = paste0(AmtrakLine, "_", order, "_", CrossingID)) %>%    write_sf("data/FinalCrossings.kml")    data_forTeams %>% writexl::write_xlsx("data/BaseDataForTeams.xlsx")  glimpse(data_MRR) glimpse(xings_pub_MO_amtrak) data_forTeams %>% count(AmtrakLine, WarnDev)  tm_shape(data_forTeams) + tm_dots(col = "order") + tm_text("order")         # Helper Map --------------------------------------------------------------  load("data/MoDOT_base_data.RData") rail_buff <- rail_MO %>% st_filter(rail_amtrak %>% st_buffer(5280/2)) gcis_buff <-    gcisCurrent %>% filter(!is.na(Latitude)) %>%    st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>% st_transform(crs) %>%    st_filter(rail_amtrak %>% st_buffer(5280/2)) %>%    select(CrossingID)  basemaps +   tm_shape(rail_buff) + tm_lines(col = "RROWNER1", palette = "Set1", popup.vars = TRUE, lwd = 2) +   tm_shape(gcis_buff) + tm_dots()   
### 0.1 Map Insets ### 
# Create inset maps for the exhibits  library(tidyverse) library(tigris) library(sf) library(tmap) tmap_mode("plot") library(basemaps)  basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))  load("data/MoDOT_base_data.RData")   crossings <- xings_pub_MO_amtrak$CrossingID  i <- crossings[11] extent_miles <- 1 createPlot <- function(i, extent_miles) {   basetile <-      basemap(       ext = xings_pub_MO_amtrak %>% filter(CrossingID == i) %>% st_buffer(5280 * extent_miles),        map_service = "osm", map_type = "streets", map_res = 1     )      plot <-      tm_shape(basetile, unit = "imperial") + tm_rgb(alpha = 0.5) +     tm_shape(rail_amtrak) + tm_lines(lwd = 0.5) +     tm_shape(xings_pub_MO_amtrak) + tm_dots(size = 0.03) +     tm_shape(gradeseps_MO_amtrak) +          tm_symbols(shape = 24, border.lwd = 0.8, border.col = "blue", alpha = 0, size = 0.05) +     tm_shape(xings_pub_MO_amtrak %>% filter(CrossingID == i)) + tm_dots(col = "red", size = 0.1) +     tm_add_legend(       type = "symbol",       labels = c("Focal Crossing", "Grade Crossing", "Grade Separation"),       col = c("red", "black", "blue"),       shape = c(21, 21, 24),        alpha = c(1, 1, 0),       border.col = c("red", "black", "blue")       ) +     tm_layout(       legend.bg.color = "white",       outer.margins = c(0,0,0,0),       asp = 0     )        tmap_save(     plot,     filename = paste0("data/InsetMaps/", i, "_inset_corridor.jpg"),     width = 3, height = 3, dpi = 600   ) }  createPlot(crossings[11], 0.5) createPlot(crossings[12], 0.5) createPlot(crossings[13], 0.5) createPlot(crossings[1], 0.5) createPlot(crossings[2], 0.5) createPlot(crossings[3], 1)   map(   crossings,   ~createPlot(. , 0.5) ) 
### 0.2 Replica Closure Analysis ### 
# Data Review for the Replica Analysis of closure impacts  library(tidyverse) library(sf) library(tmap) tmap_mode("view")  basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))  files <-    dir("//mspe-gis-file/GISProj/MissouriDOT/10366374_MoDOT_Rail_Corridors/7.2_WIP/crossing_closure_analysis",       full.names = TRUE)  files[24]  load(files[1])  time_diff <- output_list[[1]] data <- output_list[[2]]  basemaps +   tm_shape(data) + tm_lines(col = "trips", lwd = "trips", scale = 5, style = "log10") +   tm_facets(by = "scenario", sync = TRUE, nrow = 1, ncol = 2)  
### 0.3 Data for Master Sheet ### 
library(tidyverse) library(sf) library(tmap) tmap_mode("view")  load("data/MoDOT_base_data.RData")  glimpse(xings_pub_MO_amtrak)  xings_pub_MO_amtrak %>% st_drop_geometry() %>% group_by(HwySpeed) %>% summarize(count = n())     xings_pub_MO_amtrak %>% st_drop_geometry() %>%    mutate(     RrSubDiv = RrSubDiv %>% str_to_title(),     inc_fat_5yr = str_replace_na(inc_fat_5yr, 0) %>% as.numeric(),     inc_inj_5yr = str_replace_na(inc_inj_5yr, 0) %>% as.numeric(),     inc_tot_5yr = str_replace_na(inc_tot_5yr, 0) %>% as.numeric(),     inc_pdo_5yr = inc_tot_5yr - inc_fat_5yr - inc_inj_5yr,     grade_change = app1_grade_perc + app2_grade_perc   ) %>%    select(     CrossingID,     MilePost,     Railroad,     #XingOwnr,     RrSubDiv,     MaxTtSpd,     HwySpeed,     inc_fat_5yr,     inc_inj_5yr,     inc_pdo_5yr,     inc_tot_5yr,     grade_change   ) %>%    write_csv("BaseRailData v1.csv") 
### 0.4 Recommendation Summary ### 
# Script for summarizing the current recommendations for crossing improvements # MoDOT Passenger Rail Corridor Study  library(tidyverse) library(sf) library(tmap) tmap_mode("view") library(httr) library(openxlsx)  basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))  load("data/MoDOT_base_data.RData")  # Pull in current crossing recommendation sheet  master_sheet <-    readxl::read_excel("data/BaseDataForTeams 2023-05-17.xlsx", sheet = "Master Sheet") %>%    filter(     !is.na(Railroad),      Notes != "Exclude" | is.na(Notes)     )  glimpse(master_sheet)  ms_mrr <- master_sheet %>% filter(AmtrakLine == "Missouri River Runner") ms_te <- master_sheet %>% filter(AmtrakLine == "Texas Eagle")  ms_mrr %>% count(Railroad) ms_te %>% count(Railroad)  ms_mrr %>% filter(is.na(Notes)) %>% count(Subdivision)    # Crossing Owner tm_shape(gcisCurrent_MoDOT) + tm_dots(col = "XingOwnr", palette = "Set1")   # Crash Summary ms_mrr_crash <- gcisAccHist %>% filter(GXID %in% ms_mrr$CrossingID, IYR >= 18) ms_mrr_crash %>% write_csv("ms_mrr_crash.csv") ms_mrr_passive <- ms_mrr %>% filter(!WarnDev %in% c("Gates", "GatesWithMedian")) %>% select(CrossingID) ms_mrr_crash %>% filter(GXID %in% ms_mrr_passive)     crossing_recs %>% count(Railroad) crossing_recs %>% count(XingOwnr)  basemaps +   tm_shape(crossing_recs) + tm_dots(col = "Railroad")    # Diagnostic Review Itinerary for Passive Crossings -----------------------  crossings %>% st_drop_geometry() %>% count(warn_dev)  crossings_passive <- crossing_recs %>% filter(!warn_dev %in% c("FlashingOnly", "Gates", "GatesWithMedian"))  basemaps +   tm_shape(crossings_passive) + tm_dots(col = "Railroad")  crossings_passive %>%    mutate(name = paste0(order, ": ", street, " (", crossing_id, ")")) %>%    write_sf("Diagnostics/PassiveCrossings.kml")  test <- read_sf("Diagnostic/PassiveCrossings.kml")  # Summary of Recommendations ----------------------------------------------  crossing_recs_tidy <- crossing_recs %>%    pivot_longer(     cols = c(recommendation_1, recommendation_2, recommendation_3),      names_to = "RecNum", values_to = "Recommendation") %>%    filter(!is.na(Recommendation))  temp_lookup <-    crossing_recs_tidy %>% st_drop_geometry() %>%    count(Recommendation) %>% arrange((n)) %>%    mutate(     legend_order = row_number() * 10,     legend_cat = case_when(       Recommendation %in% c("Advanced flashing warning signs", "Lighting", "Signing and pavement markings") ~ "1: Universal",       Recommendation %in% c("Upgrade with gates and lights") ~ "2: Gates and Lights",       Recommendation %in% c("Closure") ~ "3: Closure",       Recommendation %in% c("Grade Separation") ~ "4: Grade Separation",       TRUE ~ "5: Other")     )  crossing_recs_tidy %>% st_drop_geometry() %>%    count(Recommendation, RecNum) %>%    pivot_wider(names_from = RecNum, values_from = n) %>%    rowwise() %>%    mutate(     across(c(recommendation_1, recommendation_2, recommendation_3), ~replace_na(.x, 0)),     total = recommendation_1 + recommendation_2 + recommendation_3     ) %>%    write_csv("rec_summary.csv")  crossing_recs_tidy <- crossing_recs_tidy %>%    left_join(temp_lookup)  basemaps +   tm_shape(crossing_recs_tidy %>% filter(legend_cat == "1: Universal") %>% mutate(legend_order = rank(legend_order))) +        tm_dots(col = "Recommendation", size = "legend_order", palette = "Set1", popup.vars = TRUE, alpha = 0.5) +   tm_shape(crossing_recs_tidy %>% filter(legend_cat == "2: Gates and Lights") %>% mutate(legend_order = rank(legend_order))) +        tm_dots(col = "Recommendation", size = "legend_order", palette = "Set1", popup.vars = TRUE, alpha = 0.5) +   tm_shape(crossing_recs_tidy %>% filter(legend_cat == "3: Closure") %>% mutate(legend_order = rank(legend_order))) +        tm_dots(col = "Recommendation", size = "legend_order", palette = "Set1", popup.vars = TRUE, alpha = 0.5) +   tm_shape(crossing_recs_tidy %>% filter(legend_cat == "4: Grade Separation") %>% mutate(legend_order = rank(legend_order))) +        tm_dots(col = "Recommendation", size = "legend_order", palette = "Set1", popup.vars = TRUE, alpha = 0.5) +   tm_shape(crossing_recs_tidy %>% filter(legend_cat == "5: Other") %>% mutate(legend_order = rank(legend_order))) +        tm_dots(col = "Recommendation", size = "legend_order", palette = "Set1", popup.vars = TRUE, alpha = 0.5)                
### CentertownSubStudy ### 
library(tidyverse) library(sf) library(tmap) tmap_mode("view")  basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))  load("data/MoDOT_base_data.RData")   basemaps +    tm_shape(gcisCurrent_MoDOT) + tm_dots()   centertownXings <-    gcisCurrent_MoDOT %>%    filter(CrossingID %in% c("442246T", "442247A", "442249N", "442250H"))  basemaps +   tm_shape(centertownXings) + tm_dots(col = "red") + tm_text("Street", ymod = 5, col = "darkred")    # StreetLight Analysis ----------------------------------------------------   sf_toproute_Marion <-    read_sf("data/streetlight/1563654_Centertown_Top_Routes/1563654_Centertown_Top_Routes_osm_segment.shp")  #Read in raw StreetLight data and combined into single table #Check for variable name difference between truck and all vehicle analyses (volume vs. traffic) data_TR <- read_csv("data/streetlight/1563654_Centertown_Top_Routes/1563654_Centertown_Top_Routes_tr_za.csv",                          col_types = cols(                            `Average Daily Destination Zone Traffic (StL Volume)` = col_double(),                            `Average Daily O-D Traffic (StL Volume)` = col_double(),                            `Average Daily Origin Zone Traffic (StL Volume)` = col_double(),                            `Destination Zone Direction (degrees)` = col_skip(),                            `Destination Zone ID` = col_double(),                            `Destination Zone Is Pass-Through` = col_skip(),                            `Destination Zone Source Type` = col_skip(),                            `Destination Zone is Bi-Direction` = col_skip(),                            `Origin Zone Direction (degrees)` = col_skip(),                            `Origin Zone ID` = col_double(),                            `Origin Zone Is Pass-Through` = col_skip(),                            `Origin Zone Source Type` = col_skip(),                            `Origin Zone is Bi-Direction` = col_skip()))  #Rename variables, calculate new variables, and filter out extraneous information data <- data_TR %>%   rename(     OZoneID = `Origin Zone ID`,     OZoneName = `Origin Zone Name`,     DZoneID = `Destination Zone ID`,     DZoneName = `Destination Zone Name`,     StL = `Average Daily O-D Traffic (StL Volume)`,     StLOTot = `Average Daily Origin Zone Traffic (StL Volume)`,     StLDTot = `Average Daily Destination Zone Traffic (StL Volume)`)%>%   mutate(     gateLoc = if_else(is.na(OZoneID), OZoneName, DZoneName),     OSM_ID = if_else(is.na(OZoneID), DZoneID, OZoneID),     gateStL = if_else(is.na(OZoneID), StLOTot, StLDTot)) %>%   filter(     `Day Type` == "0: All Days (M-Su)",     `Day Part` == "0: All Day (12am-12am)"   ) %>%    select(     gateLoc,     OSM_ID,     StL,     gateStL   )   #Consolidate any duplicate values of gateLoc and OSM_ID topRouteTidy <- data %>%   group_by(gateLoc, OSM_ID) %>%   summarise(     StL = sum(StL),     gateStL = first(gateStL)) %>%    mutate(TripPercent = round((StL / gateStL) * 100)) %>%    select(-StL, -gateStL)  #Spread to make column for each gate location topRouteSpread <- topRouteTidy %>%   spread(gateLoc, TripPercent)   #Remove N/A values topRouteSpread[is.na(topRouteSpread)] <- 0  #Define the field range containing the gates range <- c(2:(ncol(topRouteSpread)))  #Calculate a sum of all gate volumes topRouteSpread <- topRouteSpread %>%   mutate(totVol = rowSums(.[range]))    shpOSM <- full_join(sf_toproute_Marion, topRouteSpread, by = c("segment_id" = "OSM_ID"))                 # data_stl <-  #   read_csv("data/streetlight/1563654_Centertown_Top_Routes/1563654_Centertown_Top_Routes_tr_za.csv") %>%  #   janitor::clean_names() %>%  #   select( #     origin_zone_id, origin_zone_name, origin_zone_source, #     destination_zone_id, destination_zone_name, destination_zone_source,  #     day_type, day_part, volume = average_daily_o_d_traffic_st_l_volume, #     trip_proportion)    basemaps +    tm_shape(shpOSM) + tm_lines(lwd = 'Marion St', scale = 20, col = 'Marion St', palette = "Reds", title.col = "Percent Trips") +   tm_shape(centertownXings %>% filter(Street == "Marion Street")) + tm_dots(col = "blue", size = .5)  basemaps +    tm_shape(shpOSM) + tm_lines(lwd = 'Monroe St', scale = 20, col = 'Monroe St', palette = "Reds", title.col = "Percent Trips") +   tm_shape(centertownXings %>% filter(Street == "Monroe Street/MO NN")) + tm_dots(col = "blue", size = 1)  basemaps +    tm_shape(shpOSM) + tm_lines(lwd = 'Oak St', scale = 20, col = 'Oak St', palette = "Reds", title.col = "Percent Trips") +   tm_shape(centertownXings %>% filter(Street == "Oak Street")) + tm_dots(col = "blue", size = 1)  basemaps +    tm_shape(shpOSM) + tm_lines(lwd = 'Route Z', scale = 20, col = 'Route Z', palette = "Reds", title.col = "Percent Trips") +   tm_shape(centertownXings %>% filter(Street == "MO Z")) + tm_dots(col = "blue", size = 1) 
### Detour Review V2 ### 
# Review of the Closure Detour Analysis # Revised on 2023-06-01 after finalizing the new detour methodology  library(tidyverse) library(sf) library(tmap) tmap_mode("view") library(tidycensus)   basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))  load("data/MoDOT_base_data.RData") tier1 <- read_csv("Tier1_xings.csv") %>% pull(CrossingID)  master_sheet_adt <- readxl::read_excel("data/BaseDataForTeams 2023-03-13.xlsx", sheet = "Master Sheet") %>%   select(CrossingID, `Final ADT V2`) %>% janitor::clean_names()  detour_stats <-    read_csv("data/summary_stats_5_2_2023.csv") %>%    select(crossing_id, trips, avg_chg_duration, max_chg_duration, min_chg_duration) %>%    right_join(master_sheet_adt) %>%    mutate(     veh_hrs = round(avg_chg_duration / 60 / 60 * final_adt_v2, 2)   ) %>%    filter(!is.na(crossing_id))    xings_pub_MO_amtrak <-    xings_pub_MO_amtrak %>%    left_join(detour_stats, by = c("CrossingID" = "crossing_id"))    detour_overlines <- read_sf("data/overlines_5_2_2023.geojson")  # Review of individual detours # 442252W # 441995T # 442252W # 441935J # 445933J # 442259U (most delay) # 442829E (most delay with ADT < 2000) crossing_id_focus <-"441935J" overlines_x <- detour_overlines %>% filter(crossing_id == crossing_id_focus) basemaps +   tm_shape(overlines_x) +        tm_lines(col = "trips", lwd = "trips", popup.vars = TRUE, scale = 10, palette = "-Spectral") +   tm_facets(by = "scenario", sync = TRUE, ncol = 2) +   tm_shape(xings_pub_MO_amtrak %>% filter(CrossingID == crossing_id_focus) %>% select(CrossingID, avg_chg_duration, final_adt_v2, veh_hrs)) +        tm_dots(col = "red", size = 0.5)      detour_stats %>% write_csv("Detour_Redo.csv")   stats <- detour_stats %>% right_join(xings_pub_MO_amtrak %>% select(crossing_id = CrossingID)) %>% st_as_sf() basemaps +    tm_shape(stats) + tm_dots(col = "veh_hrs")         # detour_stats %>% filter(dur_min_delta < 0) %>% write_csv("Crossing_detour_redo.csv")     #      #      #      #      # t1_recs <- readxl::read_excel("C:/Users/frryan/Desktop/_Working Files/MoDOT Rail Corridor Studies/Tier 1 Recs v3.xlsx", sheet = "Recs") %>%      #   st_as_sf(coords = c("x", "y"), crs = 4326)     #      # basemaps +      #   tm_shape(rail_amtrak) + tm_lines() +     #   tm_shape(t1_recs) + tm_dots(col = "Rec Desc", palette = "Set1", size = 0.1, popup.vars = TRUE) 
### Detour Review ### 
# Review of the Closure Detour Analysis  library(tidyverse) library(sf) library(tmap) tmap_mode("view") library(tidycensus)   basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))  load("data/MoDOT_base_data.RData") tier1 <- read_csv("Tier1_xings.csv") %>% pull(CrossingID)  master_sheet_adt <- readxl::read_excel("data/BaseDataForTeams 2023-03-13.xlsx", sheet = "Master Sheet") %>%   select(CrossingID, `Final ADT V2`) %>% janitor::clean_names()  detour_shp <- read_sf("data/tier_1_overline_duration_fix.geojson")  detour_data <- read_csv("data/tier_1_summary_duration_fix.csv") %>%    pivot_wider(names_from = "scenario", values_from = c("distance", "duration")) %>%    transmute(     crossing_id,     extra_dist_per_veh = (distance_closure - distance_base) / trips,     extra_dur_per_veh_min = (duration_closure - duration_base) / trips / 60   ) %>%    left_join(master_sheet_adt) %>%    mutate(     ex_veh_hr = round(extra_dur_per_veh_min * final_adt_v2 / 60, 2),     ex_veh_mi = round(extra_dist_per_veh * final_adt_v2 / 1609.34, 2)     ) %>%    mutate(text = "") %>%    arrange(ex_veh_hr)   focus_id <- "438535M" basemaps +    tm_shape(detour_shp %>% filter(crossing_id == focus_id)) +     tm_lines(col = "scenario", lwd = "trips", scale = 10, alpha = 0.5, palette = c("blue", "red")) +   # tm_shape(detour_shp %>% filter(crossing_id == focus_id, scenario == "closure")) +   #   tm_lines(col = "red", lwd = "trips", scale = 10, alpha = 0.5) +   tm_facets(by = "scenario", sync = TRUE) +   tm_shape(xings_pub_MO_amtrak %>% filter(CrossingID == focus_id)) + tm_dots()   detour_data[detour_data$crossing_id =="442821A", "text"] <- "Not viable closure due to flooding of underpass." detour_data[detour_data$crossing_id =="442239H", "text"] <- "Already semi-permanent closure. Recommend permanent closure." detour_data[detour_data$crossing_id =="438540J", "text"] <- "Good closure option. But monitor impacts of adjacent closures." detour_data[detour_data$crossing_id =="438537B", "text"] <- "Good closure option. Relatively high impacts to vehicle miles traveled." detour_data[detour_data$crossing_id =="438534F", "text"] <- "Possible closure option. Splits property on north side of roadway." detour_data[detour_data$crossing_id =="803351T", "text"] <- "Not viable. Detour goes through private property." detour_data[detour_data$crossing_id =="438535M", "text"] <- "Possible closure option. Splits property on both sides of roadway." detour_data[detour_data$crossing_id =="445937L", "text"] <- "Not good option. Too much extra time and distance for relatively high adt (162)." detour_data[detour_data$crossing_id =="445921P", "text"] <- "Possible closure option. Impacts local traffic, but not Replica estiamted traffic." detour_data[detour_data$crossing_id =="438533Y", "text"] <- "Possible closure option. Check against adjacent closures." detour_data[detour_data$crossing_id =="", "text"] <- ""    # Older Data -------------------------------------------------------------- load("//mspe-gis-file/GISProj/MissouriDOT/10366374_MoDOT_Rail_Corridors/7.2_WIP/HERE_analysis_4_11_2023/438543E.rda")  shp_old <- output_list[[2]]  tm_shape(shp_old) + tm_lines()   test_shp <- read_sf("//mspe-gis-file/GISProj/MissouriDOT/10366374_MoDOT_Rail_Corridors/7.2_WIP/HERE_analysis_5_2/raw_routed/438543E.geojson")  basemaps +   tm_shape(test_shp) + tm_lines(col = "scenario", palette = "Set1") + tm_facets(by = "scenario")                          t1_recs <- readxl::read_excel("C:/Users/frryan/Desktop/_Working Files/MoDOT Rail Corridor Studies/Tier 1 Recs v3.xlsx", sheet = "Recs") %>%    st_as_sf(coords = c("x", "y"), crs = 4326)  basemaps +    tm_shape(rail_amtrak) + tm_lines() +   tm_shape(t1_recs) + tm_dots(col = "Rec Desc", palette = "Set1", size = 0.1, popup.vars = TRUE) 
### Field Visit Planning ### 
  library(tidyverse) library(sf) library(tmap) tmap_mode("view") library(httr) library(openxlsx)  basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))       crossings <-    readxl::read_excel("data/BaseDataForTeams 2023-03-13.xlsx", sheet = "Master Sheet") %>%    select(AmtrakLine, Notes, order, CrossingID, Street, x, y,           FieldRev = `Field Review Needed`, FieldNotes = `Initial Crossing Review Notes`) %>%    filter(~is.na(x)) %>%    st_as_sf(coords = c("x", "y"), crs = 4326)  crossings_field <- crossings %>% filter(   is.na(Notes),   FieldRev == 1 )  basemaps +    tm_shape(crossings) + tm_dots(col = "gray") +   tm_shape(crossings_field) + tm_dots(col = "red")    crossings_field %>% write_sf("FieldReviewCrossings.kml") crossings_field %>% mutate(review_status = 0) %>% write_sf("FieldReviewCrossings.shp") 
### Pop Density ### 
library(tidyverse) library(sf) library(tmap) tmap_mode("view") library(tidycensus)   basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))  load("data/MoDOT_base_data.RData")  tm_shape(xings_pub_MO_amtrak) + tm_dots()  crs <- 6511  vars <- load_variables(year = 2021, dataset = "acs5")  popData <-    get_acs("block group", "B01001_001", state = "MO", geometry = TRUE, year = 2021) %>%    st_transform(6511) %>%    st_filter(xings_pub_MO_amtrak %>% st_buffer(1609))   basemaps +   tm_shape(popData) + tm_polygons(col = "estimate", alpha = 0.5) +   tm_shape(xings_pub_MO_amtrak) + tm_dots() +   tm_shape(xings_pub_MO_amtrak %>% st_buffer(1609)) + tm_borders()  i <- 265 density_fun <- function(i) {   crossing <- xings_pub_MO_amtrak[i,]      crossingID <- crossing %>% pull(CrossingID)      crossingCount <-      xings_pub_MO_amtrak %>% st_filter(crossing %>% st_buffer(1609)) %>%      st_drop_geometry() %>% summarize(count = n()) %>% pull(count)      crossingDensity <-      popData %>% st_filter(crossing %>% st_buffer(1609)) %>% select(GEOID, estimate) %>%      mutate(       area_sm = st_area(.) %>% as.numeric() / 2.59e+6,       popPerSM = estimate / area_sm       ) %>%      st_intersection(crossing %>% select(CrossingID) %>% st_buffer(1609)) %>%      mutate(       area_sm_new = st_area(.) %>% as.numeric() / 2.59e+6,       pop_new = area_sm_new / area_sm * estimate       ) %>%      st_drop_geometry() %>%      summarize(       pop = sum(pop_new),       area_sm = sum(area_sm_new),       popPerSM = pop / area_sm       ) %>%      pull(popPerSM)      return(tibble(     CrossingID = crossingID,      crossingCount = crossingCount,      crossingDensity =crossingDensity)) }  densityData <-    map_dfr(     1:length(xings_pub_MO_amtrak$CrossingID),     ~density_fun(.)   )  densityData %>% write_csv("CrossingDensity.csv")   ggplot() +   geom_point(data = densityData, aes(y = crossingDensity, x = crossingCount)) +   geom_point(data = densityData %>%                 filter(CrossingID %in% c("442249N", "442246T", "442247A")),               aes(y = crossingDensity, x = crossingCount), col = "red") +   scale_y_log10() plotly::ggplotly()   basemaps +   tm_shape(popData) + tm_polygons(col = "estimate", alpha = 0.5) +   tm_shape(xings_pub_MO_amtrak) + tm_dots() +   tm_shape(xings_pub_MO_amtrak %>% left_join(densityData)) + tm_dots(col = "crossingDensity", size = "crossingDensity", palette = "BuPu")   densityData %>%    group_by(crossingCount) %>%    filter(crossingDensity == min(crossingDensity)) %>%    arrange(crossingCount) %>%    left_join(xings_pub_MO_amtrak %>% select(CrossingID, Street, CityName)) %>%    st_as_sf() %>% st_drop_geometry() %>%    select(crossingCount, crossingDensity, CrossingID, Street, CityName) %>%    write_csv("Crossing and Pop Density.csv")   tm_shape(popData) + tm_polygons(col = "estimate", alpha = 0.5) + tm_shape(xings_pub_MO_amtrak) + tm_dots() + tm_shape(xings_pub_MO_amtrak %>% filter(CrossingID == "442113B")) + tm_dots(col = "red")   # Look up places and Counties ---------------------------------------------  library(tigris) mo_places <- places(state = "MO") %>% st_transform(crs)  crossing_places <- xings_pub_MO_amtrak %>% select(CrossingID) %>% st_intersection(mo_places) %>%    select(CrossingID, NAME, NAMELSAD) crossing_places %>% write_csv("Crossing_Places.csv")  basemaps +   tm_shape(mo_places) + tm_polygons(alpha = 0.5) +   tm_shape(rail_amtrak) + tm_lines(col = "AmtrakLine", palette = "Set1") +   tm_shape(xings_pub_MO_amtrak) + tm_dots() + tm_text(text = "CrossingID", xmod = 0.1)  crossing_counties <- xings_pub_MO_amtrak %>% select(CrossingID) %>%    st_intersection(counties_MO %>% st_transform(crs)) %>%    select(CrossingID, NAME, NAMELSAD) crossing_counties %>% write_csv("Crossing_Counties.csv")     tmap_mode("plot") tm_shape(counties_MO) + tm_polygons(lwd = 3, col.border = "white") 
### PPT Summaries ### 
library(tidyverse) library(sf) library(tmap) tmap_mode("view") library(tidycensus)   basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery")) load("data/MoDOT_base_data.RData") tm_shape(xings_pub_MO_amtrak) + tm_dots() crs <- 6511  master_sheet <- readxl::read_excel("data/BaseDataForTeams 2023-03-13.xlsx", sheet = "Master Sheet") %>%    filter(     !is.na(AmtrakLine),     is.na(Notes)     )  master_sheet %>% count(AmtrakLine)  master_sheet %>% ggplot(aes(x = `Daily Trains`)) + geom_histogram(binwidth = 1) + facet_grid(~AmtrakLine) plotly::ggplotly()  master_sheet %>% ggplot(aes(x = `MaxTtSpd`)) + geom_histogram(binwidth = 1) + facet_grid(~AmtrakLine) plotly::ggplotly()  xings_pub_MO_amtrak %>% group_by(AmtrakLine) %>% count(PassCnt)    # Slide 14  #Define counties for map counties_MRR <-    counties_MO %>% st_transform(crs) %>%    st_filter(xings_pub_MO_amtrak %>% filter(AmtrakLine == "Missouri River Runner")) tm_shape(counties_MRR) + tm_polygons() counties_MRR %>% write_sf("forPPT/counties_MRR.shp") counties_MRR %>% write_sf("forPPT/counties_MRR.kml")  # Define MRR Crossings for map xings_MRR <-    xings_pub_MO_amtrak %>% filter(AmtrakLine == "Missouri River Runner") %>%    mutate(passive_cat =             case_when(              Pedestrian == "Yes"~ "Pedestrian",              WarnDev %in% c("Not Classified", "StopSign", "YieldSign", "Crossbucks") ~ "passive",              TRUE ~ "active"            )   ) xings_MRR %>% count(passive_cat) xings_MRR %>% write_sf("forPPT/xings_MRR_passive.shp") xings_MRR %>% write_sf("forPPT/xings_MRR_passive.kml") xings_MRR %>% filter(passive_cat == "Pedestrian")      # Risk Calculations -------------------------------------------------------  risk <- xings_pub_MO_amtrak %>%    mutate(totTracks = IndustryTrk + MainTrk + SidingTrk + TransitTrk + YardTrk) %>%   select(CrossingID, totTracks) %>%    left_join(master_sheet) %>%    select(CrossingID, AmtrakLine, Notes, `Tier I`, WarnDev, `Daily Trains`,           totTracks, `Tier I Rec Description`, `All Tier Rec Description`) %>%    filter(is.na(Notes) | !str_detect(Notes, "Pedestrian|Exclude")) %>%    mutate(# Risk for all crossings     WarnDevEx = case_when(       WarnDev %in% c("Crossbucks", "Not Classified", "StopSign", "YieldSign") ~ "pass",       WarnDev %in% c("FlashingOnly") ~ "FL",       TRUE ~ "gates"     ),     WarnDevNewAll = case_when(       `All Tier Rec Description` %in% c("Closure") ~ "closure",       `All Tier Rec Description` %>% str_detect("Grade Separation") ~ "grade_sep",       `All Tier Rec Description` %>% str_detect("Security Gates") ~ "gates",       `All Tier Rec Description` %>% str_detect("Gates|AFWS|Lighting|Other") ~ "gates",       `All Tier Rec Description` %>% str_detect("Public-to") ~ "priv",       `All Tier Rec Description` %>% str_detect("None") ~ WarnDevEx     ),     WarnDevChangeAll = paste0(WarnDevEx, "_to_", WarnDevNewAll),     WarnDevCatAll = case_when(       CrossingID == "446320J" ~ "pass_to_FL",       WarnDevChangeAll %>% str_detect("closure") ~ "closure",       WarnDevChangeAll %>% str_detect("grade_sep") ~ "grade_sep",       WarnDevEx == WarnDevNewAll ~ "None",       TRUE ~ WarnDevChangeAll     ),     base_risk_red_all = case_when(       WarnDevCatAll %in% c("closure", "grade_sep") ~ 1,       WarnDevCatAll == "None" ~ 0,       WarnDevCatAll == "pass_to_gates" & `Daily Trains` <= 10 & totTracks <=1 ~ 0.75,       WarnDevCatAll == "pass_to_gates" & `Daily Trains` <= 10 & totTracks > 1 ~ 0.86,       WarnDevCatAll == "pass_to_gates" & `Daily Trains` > 10 & totTracks <=1 ~ 0.8,       WarnDevCatAll == "pass_to_gates" & `Daily Trains` > 10 & totTracks > 1 ~ 0.78,       WarnDevCatAll == "FL_to_gates" & `Daily Trains` <= 10 & totTracks <=1 ~ 0.89,       WarnDevCatAll == "FL_to_gates" & `Daily Trains` <= 10 & totTracks > 1 ~ 0.65,       WarnDevCatAll == "FL_to_gates" & `Daily Trains` > 10 & totTracks <=1 ~ 0.69,       WarnDevCatAll == "FL_to_gates" & `Daily Trains` > 10 & totTracks > 1 ~ 0.63,       WarnDevCatAll == "pass_to_FL" ~ 0.75,       WarnDevCatAll == "pass_to_priv" ~ 0,       TRUE ~ 99     ),     AWSF_risk_red_all = if_else(`All Tier Rec Description` %>% str_detect("AFWS"), 0.05, 0),     Lighting_risk_red_all = if_else(`All Tier Rec Description` %>% str_detect("Lighting"), 0.05, 0),     final_red_all = 1 - ((1 - base_risk_red_all) * (1 - AWSF_risk_red_all) * (1 - Lighting_risk_red_all))   ) %>%    mutate(# Mutate just for the Tier I crossings     WarnDevNewT1 = case_when(       `Tier I Rec Description` %in% c("Closure") ~ "closure",       `Tier I Rec Description` %>% str_detect("Grade Separation") ~ "grade_sep",       `Tier I Rec Description` %>% str_detect("Security Gates") ~ "gates",       `Tier I Rec Description` %>% str_detect("Gates|AFWS|Lighting|Other") ~ "gates",       `Tier I Rec Description` %>% str_detect("Public-to") ~ "priv",       `Tier I Rec Description` %>% str_detect("None") ~ WarnDevEx     ),     WarnDevChangeT1 = paste0(WarnDevEx, "_to_", WarnDevNewT1),     WarnDevCatT1 = case_when(       CrossingID == "446320J" ~ "pass_to_FL",       WarnDevChangeT1 %>% str_detect("closure") ~ "closure",       WarnDevChangeT1 %>% str_detect("grade_sep") ~ "grade_sep",       WarnDevEx == WarnDevNewT1 ~ "None",       TRUE ~ WarnDevChangeT1     ),     base_risk_red_t1 = case_when(       WarnDevCatT1 %in% c("closure", "grade_sep") ~ 1,       WarnDevCatT1 == "None" ~ 0,       WarnDevCatT1 == "pass_to_gates" & `Daily Trains` <= 10 & totTracks <=1 ~ 0.75,       WarnDevCatT1 == "pass_to_gates" & `Daily Trains` <= 10 & totTracks > 1 ~ 0.86,       WarnDevCatT1 == "pass_to_gates" & `Daily Trains` > 10 & totTracks <=1 ~ 0.8,       WarnDevCatT1 == "pass_to_gates" & `Daily Trains` > 10 & totTracks > 1 ~ 0.78,       WarnDevCatT1 == "FL_to_gates" & `Daily Trains` <= 10 & totTracks <=1 ~ 0.89,       WarnDevCatT1 == "FL_to_gates" & `Daily Trains` <= 10 & totTracks > 1 ~ 0.65,       WarnDevCatT1 == "FL_to_gates" & `Daily Trains` > 10 & totTracks <=1 ~ 0.69,       WarnDevCatT1 == "FL_to_gates" & `Daily Trains` > 10 & totTracks > 1 ~ 0.63,       WarnDevCatT1 == "pass_to_FL" ~ 0.75,       WarnDevCatT1 == "pass_to_priv" ~ 0,       WarnDevChangeT1 %>% str_detect("to_NA") ~ 0,       TRUE ~ 99     ),     AWSF_risk_red_t1 = if_else(`Tier I Rec Description` %>% str_detect("AFWS"), 0.05, 0),     Lighting_risk_red_t1 = if_else(`Tier I Rec Description` %>% str_detect("Lighting"), 0.05, 0),     final_red_t1 = 1 - ((1 - base_risk_red_t1) * (1 - AWSF_risk_red_t1) * (1 - Lighting_risk_red_t1))   )   risk %>% st_drop_geometry() %>% group_by(AmtrakLine) %>%   count(WarnDevChange) %>% arrange(WarnDevChange)  risk %>% st_drop_geometry() %>% group_by(AmtrakLine) %>%   count(WarnDevCat) risk %>% st_drop_geometry() %>% group_by(AmtrakLine) %>%   count(`All Tier Rec Description`) risk %>% st_drop_geometry() %>% group_by(AmtrakLine) %>%    count(`Tier I Rec Description`)   risk %>% st_drop_geometry() %>% write_csv("RiskCalcs.csv")     master_sheet_summary <-    readxl::read_excel("data/BaseDataForTeams 2023-03-13.xlsx", sheet = "Master Sheet") %>%    filter(is.na(Notes) | !str_detect(Notes, "Pedestrian|Exclude")) %>%    filter(!is.na(AmtrakLine)) %>%    select(AmtrakLine, `Est 1-yr Incidents`,           `Final Est Incidents All`, `All Tier Rec Description`,          `Final Est Incidents Tier 1`, `Tier I Rec Description`,          `Total Trains`, `Final ADT V2`          ) %>%    mutate(     exp_ind = `Total Trains` * `Final ADT V2`,     exp_ind_t1 = case_when(       `Tier I Rec Description` %>% str_detect("Clos|Grade Sep") ~ 0,       TRUE ~ exp_ind     ),     exp_ind_all = case_when(       `All Tier Rec Description` %>% str_detect("Clos|Grade Sep") ~ 0,       TRUE ~ exp_ind     )     )      # Exp Ind and Risk Summary master_sheet_summary %>% group_by(AmtrakLine) %>%    summarize(     est_inc_before = sum(`Est 1-yr Incidents`),     est_inc_after_all = sum(`Final Est Incidents All`),     est_inc_after_t1 = sum(`Final Est Incidents Tier 1`),     exp_ind_tot = sum(exp_ind),     exp_ind_all = sum(exp_ind_all),     exp_ind_t1 = sum(exp_ind_t1)     ) %>%    mutate(     percent_red_all = 1 - (est_inc_after_all / est_inc_before),     percent_red_t1 = 1 - (est_inc_after_t1 / est_inc_before),     delta_inc_all = est_inc_before - est_inc_after_all,     delta_inc_t1 = est_inc_before - est_inc_after_t1,     percent_exp_ind_red_all = (exp_ind_all - exp_ind_tot) / exp_ind_tot,     percent_exp_ind_red_t1 = (exp_ind_t1 - exp_ind_tot) / exp_ind_tot,     delta_exp_ind_all = exp_ind_tot - exp_ind_all,     delta_exp_ind_t1 = exp_ind_tot - exp_ind_t1     ) %>% t()  # Tally of improvement type All Tiers master_sheet_summary %>%    mutate(     Closures = if_else(str_detect(`All Tier Rec Description`, "Closure"), 1, 0),     AFWS = if_else(str_detect(`All Tier Rec Description`, "AFWS"), 1, 0),     Lighting = if_else(str_detect(`All Tier Rec Description`, "Lighting"), 1, 0),     Other = if_else(str_detect(`All Tier Rec Description`, "Other"), 1, 0),     PublicToPrivate = if_else(str_detect(`All Tier Rec Description`, "Public-to"), 1, 0),     SecurityGates = if_else(str_detect(`All Tier Rec Description`, "Security"), 1, 0),     GradeSeps = if_else(str_detect(`All Tier Rec Description`, "Sep"), 1, 0)   ) %>%    group_by(AmtrakLine) %>%    summarize(across(c(Closures:GradeSeps), sum))   master_sheet_summary %>%    mutate(     Closures = if_else(str_detect(`Tier I Rec Description`, "Closure"), 1, 0),     SecurityGates = if_else(str_detect(`Tier I Rec Description`, "Security"), 1, 0),     Gates = if_else(str_detect(`Tier I Rec Description`, "Gates"), 1, 0) - SecurityGates,     AFWS = if_else(str_detect(`Tier I Rec Description`, "AFWS"), 1, 0),     Lighting = if_else(str_detect(`Tier I Rec Description`, "Lighting"), 1, 0),     Other = if_else(str_detect(`Tier I Rec Description`, "Other"), 1, 0),     PublicToPrivate = if_else(str_detect(`Tier I Rec Description`, "Public-to"), 1, 0),     GradeSeps = if_else(str_detect(`Tier I Rec Description`, "Sep"), 1, 0)   ) %>%    filter(!is.na(`Tier I Rec Description`)) %>%    group_by(AmtrakLine) %>%    summarize(across(c(Closures:GradeSeps), sum))        
### ROW Data ### 
library(tidyverse) library(sf) library(tmap) tmap_mode("view") tmap_options(check.and.fix = TRUE)  basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))  load("data/MoDOT_base_data.RData")  st_layers("//ksc-gis01/Data1/MoDOT/RR Safety Study/RR Safety Study_ArcGISPro/7.2_WIP/spatial/gdb/HDR_Project.gdb")  parcels <-    read_sf(     "//ksc-gis01/Data1/MoDOT/RR Safety Study/RR Safety Study_ArcGISPro/7.2_WIP/spatial/gdb/HDR_Project.gdb",     layer = "UP_RR_Xings_Parcels")  parcels %>% write_sf("FinalParcels_MoDOT.kml")  basemaps +   tm_shape(parcels) + tm_polygons(alpha = 0.2) + +tm_borders() +   tm_shape(xings_pub_MO_amtrak %>% filter(CrossingID == "442092K")) + tm_dots(col = "red") 
### StreetLight Data Prep ### 
   library(tidyverse) library(sf) library(tmap) tmap_mode("view")   load("data/MoDOT_base_data.RData")  lines_TE <- rail_amtrak %>% filter(AmtrakLine == "Texas Eagle") lines_MRR <- rail_amtrak %>% filter(AmtrakLine == "Missouri River Runner")  lines_buff_TE <- lines_TE %>% summarize() %>% st_buffer(8047) lines_buff_MRR <- lines_MRR %>% summarize() %>% st_buffer(8047)  grid_size = 1609*3  hex_grid_TE <-    lines_buff_TE %>% st_make_grid(cellsize = grid_size, square = FALSE) %>% st_as_sf() %>%    st_filter(lines_buff_TE) %>% st_difference(lines_TE %>% summarize() %>% st_buffer(20)) %>%    mutate(     id = row_number(),     name = row_number(),     is_pass = 0   ) hex_grid_MRR <-    lines_buff_MRR %>% st_make_grid(cellsize = grid_size, square = FALSE) %>% st_as_sf() %>%    st_filter(lines_buff_MRR) %>% st_difference(lines_MRR %>% summarize() %>% st_buffer(20)) %>%    mutate(     id = row_number(),     name = row_number(),     is_pass = 0   )  tm_shape(hex_grid_TE) + tm_polygons(alpha = 0.5, col = "blue") +   tm_shape(hex_grid_MRR) + tm_polygons(alpha = 0.5, col = "purple") +   tm_shape(lines_TE) + tm_lines() +   tm_shape(lines_MRR) + tm_lines()   hex_grid_TE %>% write_sf("data/hexForStreetLight_TE.shp") hex_grid_MRR %>% write_sf("data/hexForStreetLight_MRR.shp") 
### SummaryForTechMemo ### 
library(tidyverse) library(sf) library(tmap) tmap_mode("view")  load("data/MoDOT_base_data.RData")   # Crash Data Summary ------------------------------------------------------  crash_summary <-    gcisAccHist %>% filter(GXID %in% xings_pub_MO_amtrak$CrossingID) %>%    left_join(xings_pub_MO_amtrak %>% select(GXID = CrossingID, AmtrakLine)) %>%    mutate(Narrative = paste(NARR1, NARR2, NARR3, NARR4, NARR5, sep = " ") %>% str_replace_all(" NA", "")) %>%    mutate(     TYPVEH = case_when(       TYPVEH == "A" ~ "Auto",       TYPVEH == "B" ~ "Truck",       TYPVEH == "C" ~ "Truck-Trailer",       TYPVEH == "D" ~ "Pickup Truck",       TYPVEH == "E" ~ "Van",       TYPVEH == "J" ~ "Other",       TYPVEH == "K" ~ "Pedestrian",       TYPVEH == "M" ~ "Other",       TRUE ~ "Other"     ),     POSITION = case_when(       POSITION == "1" ~ "Stalled/Stuck on Crossing",       POSITION == "2" ~ "Stopped on Crossing",       POSITION == "3" ~ "Moving over Crossing",       POSITION == "5" ~ "Blocked by Crossing Gates",     ),     MOTORIST = case_when(       MOTORIST == "1" ~ "Went Around Gates",       MOTORIST == "3" ~ "Did Not Stop",       MOTORIST == "4" ~ "Stopped on Crossing",       MOTORIST == "5" ~ "Other",       MOTORIST == "7" ~ "Went Through Gate"     ),     IYR = 2000 + as.numeric(IYR),     TIMEHR2 = if_else(AMPM == "PM" & TIMEHR < 12, as.character(as.numeric(TIMEHR) + 12), TIMEHR),     TIMEHR3 = paste(TIMEHR2, TIMEMIN, sep = ":"),     TimeCrash = lubridate::make_datetime(year = IYR, month = IMO, day = DAY, hour = TIMEHR2, min = TIMEMIN)   ) %>%    arrange(AmtrakLine, IYR) %>%    select(GXID, AmtrakLine, TimeCrash, TYPVEH, POSITION, MOTORIST, FatalInjury, Narrative)  crash_summary %>% group_by(AmtrakLine) %>% count(TYPVEH) %>%    pivot_wider(names_from = AmtrakLine, values_from = n) %>% write_csv("CrashesByVehType.csv")  crash_summary %>% group_by(AmtrakLine) %>% count(MOTORIST) %>%    pivot_wider(names_from = AmtrakLine, values_from = n) %>% write_csv("CrashesByAction.csv")  crash_summary %>% write_csv("Crash_SummaryAll.csv")            # FRA Accident Prediction Model Results -----------------------------------  FRA_APS <-    read_csv("C:/Users/frryan/Desktop/_Working Files/_R/FRA/BaseRiskAnalysis_2023-04-10.csv") %>%    mutate(EstAnnCrashes = crashAnnEst_PDO + crashAnnEst_INJ + crashAnnEst_FAT)  FRA_APS_MO <-    xings_pub_MO_amtrak %>%    select(CrossingID, AmtrakLine) %>%    left_join(FRA_APS)    basemaps +   tm_shape(FRA_APS_MO) +    tm_dots(     col = "EstAnnCrashes", scale = 2, size = "EstAnnCrashes",      style = "log10_pretty", palette = "-Spectral", title = "Est. Annual Crashes"     )   FRA_APS_MO %>%    ggplot(aes(x = EstAnnCrashes, fill = AmtrakLine)) + geom_density(show.legend = FALSE) +   scale_x_log10() +   scale_fill_manual(values = c("darkslateblue", "firebrick")) +   xlab("Estimated Annual Crashes (Log Scale)") + ylab("Density") +   facet_grid(~AmtrakLine) ggsave(filename = "CrashDistribution.jpg", width = 6, height = 2)  plotly::ggplotly()    # Blocked Crossings -------------------------------------------------------  blockedCrossings <-    read_csv("C:/Users/frryan/Desktop/_Working Files/_R/FRA/BlockedCrossingReports_2023-04-23.csv")  blockedCrossingsMO <-    xings_pub_MO_amtrak %>% select(CrossingID, AmtrakLine, Street, CityName) %>%    left_join(blockedCrossings) %>%    mutate(total = replace_na(total, 0))     blockedCrossingsMO %>% st_drop_geometry() %>% count(total)  basemaps +    tm_shape(blockedCrossingsMO %>% filter(total > 0)) + tm_dots(col = "total", size = "total", title = "Blocked Crossing Reports")   blockedCrossingsMO %>% filter(total > 0) %>% st_drop_geometry() %>% arrange(desc(total)) %>%    write_csv("BlockedCrossingSummary.csv")     # StreetLight Summary -----------------------------------------------------   stl_vols <-    read_csv("StreetLightVolumes.csv") %>% select(-Crossing) %>%    pivot_longer(cols = ADT:Ped, names_to = "Mode", values_to = "Volume")  stl_vols %>% ggplot(aes(x = Volume)) + geom_histogram() +   facet_wrap(~Mode) +   ylab("Count") + xlab("Estimated Daily Volumes") +   scale_x_log10() ggsave(filename = "StreetLightVolumes.jpg")      # High Level Benefit-Cost Analysis ------------------------------------------------------  BCR_Benefits <-    readxl::read_excel("Benefit_Cost_Raw.xlsx", sheet = "SafetyBenefits") %>%    select(-AmtrakLine, -Notes) %>%    pivot_longer(-CrossingID, values_to = "Benefit") %>%    mutate(BC_ID = paste0(CrossingID, "_", str_sub(name, 0, 5))) %>%    select(BC_ID, Benefit)  BCR_Desc <-    readxl::read_excel("Benefit_Cost_Raw.xlsx", sheet = "Costs") %>%    select(CrossingID, Tier1Desc, Tier2Desc, Tier3Desc) %>%    pivot_longer(-CrossingID, values_to = "Description") %>%    mutate(BC_ID = paste0(CrossingID, "_", str_sub(name, 0, 5))) %>%    select(BC_ID, Description)  BCR_Costs <-    readxl::read_excel("Benefit_Cost_Raw.xlsx", sheet = "Costs") %>%    select(CrossingID, Tier1Cost, Tier2Cost, Tier3Cost) %>%    pivot_longer(-CrossingID, values_to = "Cost") %>%    mutate(BC_ID = paste0(CrossingID, "_", str_sub(name, 0, 5))) %>%    select(BC_ID, Cost)   BCR_Combo <-    BCR_Desc %>%    left_join(BCR_Costs) %>%    left_join(BCR_Benefits) %>%    filter(!is.na(Description)) %>%    mutate(     Benefit = as.numeric(Benefit),     Ratio = Benefit / Cost     )   
### Tier I Recs ### 
  library(tidyverse) library(sf) library(tmap) tmap_mode("view") library(httr) library(openxlsx)  basemaps <- tm_basemap(c("CartoDB.Positron", "OpenStreetMap.Mapnik", "Esri.WorldImagery"))  load("data/MoDOT_base_data.RData")  recs <- readxl::read_excel("Tier 1 Recs.xlsx") %>%    st_as_sf(coords = c("x", "y"), crs = 4326)  basemaps +    tm_shape(rail_amtrak %>% filter(AmtrakLine != "Southwest Chief")) + tm_lines() +   tm_shape(recs) + tm_dots(col = "Rec Desc", palette = "Set1", size = 0.5, popup.vars = c("Rec Desc", "CrossingID") 
